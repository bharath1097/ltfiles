{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           ;; only works on > 0.6.4 e.g. master
           (:lt.objs.app/set-default-zoom-level -0.5)
           (:lt.plugins.vim/map-keys {"0" "^",
                                      "-" ":ltexec ltfiles.find-next-clojure-word",
                                      "j" "gj",
                                      "k" "gk"
                                      ;"v" ":ltexec ltfiles.vim-visual-mode"
                                      "gv" ":ltexec ltfiles.vim-reselect-visual"
                                      ;; <Space> is a leader key in normal mode
                                      "<Space>b" ":ltexec behaviors.modify-user"
                                      ; c - for cancel/clear/kill actions
                                      "<Space>cc" ":ltexec clear-console"
                                      "<Space>cC" ":ltexec editor.disconnect-clients"
                                      "<Space>ce" ":ltexec eval.cancel-all!"
                                      "<Space>cw" ":ltexec editor.watch.remove-all"
                                      "<Space>cs" ":ltexec reset-working"
                                      "<Space>gi" ":ltexec gitbeam.in-with-clipboard"
                                      "<Space>gI" ":ltexec gitbeam.in-with-current-word"
                                      "<Space>go" ":ltexec gitbeam.out-with-external-browser"
                                      "<Space>l" ":ltexec ltfiles.connect-to-lt-ui"
                                      "<Space>k" ":ltexec keymap.modify-user"
                                      "<Space>oi" ":ltexec ltfiles.tab-open-current-url"
                                      "<Space>oo" ":ltexec ltfiles.system-open-current-url"
                                      "<Space>or" ":ltexec workspace.show-recents"
                                      "<Space>pc" ":ltexec ltfiles.system-open-plugin-changelog"
                                      "<Space>pm" ":ltexec plugin-manager.show"
                                      "<Space>r" ":ltexec ltfiles.refresh-current-workspace-folder"
                                      ; t - for toggle
                                      "<Space>tc" ":ltexec toggle-console"
                                      "<Space>tl" ":ltexec ltfiles.toggle-line-numbers"
                                      "<Space>tw" ":ltexec ltfiles.toggle-strip-whitespace"
                                      "<Space>v" ":ltexec tabset.new"
                                      "<Space>w" ":ltexec workspace.show"
                                      "<Space>x" ":ltexec tabset.close"
                                      ;; \\ is leader key for paredit
                                      ;; loosely inspired by https://groups.google.com/forum/#!topic/light-table-discussion/BIyWHnRcoWc
                                      "\\." ":ltexec paredit.grow.right"
                                      "\\," ":ltexec paredit.shrink.right"
                                      "\\<" ":ltexec paredit.grow.left"
                                      "\\>" ":ltexec paredit.shrink.left"
                                      "\\d" ":ltexec paredit-plus.delete-pair-contents"
                                      "\\j" ":ltexec paredit-plus.join-sexps"
                                      "\\k" ":ltexec paredit-plus.kill"
                                      "\\n" ":ltexec paredit-plus.new-line-after-pair-close"
                                      "\\r" ":ltexec paredit-plus.raise-sexp"
                                      ;; handles top-level case that paredit doesn't
                                      "\\s" ":ltexec paredit-plus.splice-sexp"
                                      "\\|" ":ltexec paredit-plus.split-sexp"
                                      "\\(" ":ltexec paredit-plus.wrap-round"
                                      "\\{" ":ltexec paredit-plus.wrap-curly"
                                      "\\[" ":ltexec paredit-plus.wrap-square"
                                      "\\'" ":ltexec paredit-plus.wrap-quote"})]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "cobalt")
              (:lt.plugins.vim/activate-vim)
              :lt.objs.editor/hide-line-numbers]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro]
     ;; turn off aggressive autocomplete
     :editor [:lt.plugins.auto-complete/auto-show-on-input]
     ;; turn off annoying info boxes while editing any behavior
     :editor.behaviors [:lt.objs.langs.behaviors/show-info-on-move]}}
